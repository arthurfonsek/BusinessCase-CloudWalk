import os
import json
import uuid
from typing import Dict, List, Any
from django.contrib.auth.models import User
from .models import (
    Profile, UserTier, Tier, Achievement, UserAchievement, 
    Reward, UserReward, Friendship, AIConversation, AIMessage
)

class AIGamificationService:
    """Servi√ßo de IA para gamifica√ß√£o e recomenda√ß√µes"""
    
    def __init__(self):
        self.openai_key = os.getenv("OPENAI_API_KEY")
    
    def get_user_gamification_context(self, user: User) -> Dict[str, Any]:
        """Obt√©m contexto completo de gamifica√ß√£o do usu√°rio"""
        try:
            profile = Profile.objects.get(user=user)
            user_tier = UserTier.objects.get(user=user)
            
            # Estat√≠sticas de referrals
            total_referrals = Friendship.objects.filter(user=user, is_referred=True).count()
            successful_referrals = total_referrals  # Todos s√£o considerados bem-sucedidos
            
            # Conquistas
            user_achievements = UserAchievement.objects.filter(user=user)
            achievements_count = user_achievements.count()
            
            # Recompensas
            available_rewards = Reward.objects.filter(is_active=True)
            user_rewards = UserReward.objects.filter(user=user)
            claimed_rewards = user_rewards.count()
            
            # Pr√≥ximo tier
            next_tier = Tier.objects.filter(
                min_referrals__gt=user_tier.current_referrals
            ).order_by('min_referrals').first()
            
            referrals_to_next = 0
            if next_tier:
                referrals_to_next = next_tier.min_referrals - user_tier.current_referrals
            
            return {
                'username': user.username,
                'current_tier': user_tier.tier.name,
                'current_referrals': user_tier.current_referrals,
                'total_points': user_tier.total_points,
                'next_tier': next_tier.name if next_tier else None,
                'referrals_to_next': referrals_to_next,
                'achievements_count': achievements_count,
                'claimed_rewards': claimed_rewards,
                'available_rewards_count': available_rewards.count(),
                'total_referrals': total_referrals,
                'successful_referrals': successful_referrals,
            }
        except Exception as e:
            return {'error': str(e)}
    
    def generate_ai_response(self, user: User, user_message: str) -> str:
        """Gera resposta da IA baseada no contexto do usu√°rio"""
        context = self.get_user_gamification_context(user)
        
        if 'error' in context:
            return "Desculpe, n√£o consegui acessar suas informa√ß√µes no momento. Tente novamente mais tarde."
        
        # Prompt baseado no contexto
        prompt = self._build_prompt(context, user_message)
        
        # Se n√£o h√° chave da OpenAI, usar respostas pr√©-definidas
        if not self.openai_key:
            return self._get_fallback_response(context, user_message)
        
        try:
            import openai
            openai.api_key = self.openai_key
            
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": self._get_system_prompt()},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=500,
                temperature=0.7
            )
            
            return response.choices[0].message.content.strip()
        except Exception as e:
            return self._get_fallback_response(context, user_message)
    
    def _build_prompt(self, context: Dict[str, Any], user_message: str) -> str:
        """Constr√≥i prompt para a IA"""
        return f"""
Contexto do usu√°rio:
- Nome: {context['username']}
- Tier atual: {context['current_tier']}
- Referrals: {context['current_referrals']}
- Pontos: {context['total_points']}
- Pr√≥ximo tier: {context['next_tier'] or 'M√°ximo alcan√ßado'}
- Referrals para pr√≥ximo tier: {context['referrals_to_next']}
- Conquistas: {context['achievements_count']}
- Recompensas resgatadas: {context['claimed_rewards']}
- Recompensas dispon√≠veis: {context['available_rewards_count']}

Mensagem do usu√°rio: {user_message}

Responda de forma amig√°vel e √∫til, dando conselhos espec√≠ficos sobre como melhorar o tier, usar pontos e ganhar mais referrals.
"""
    
    def _get_system_prompt(self) -> str:
        """Prompt do sistema para a IA"""
        return """
Voc√™ √© um assistente de gamifica√ß√£o especializado em ajudar usu√°rios a maximizar seus pontos e progredir nos tiers do Forkly.

Seu papel √©:
1. Analisar a situa√ß√£o atual do usu√°rio
2. Dar conselhos espec√≠ficos sobre como ganhar mais referrals
3. Sugerir como usar pontos de forma estrat√©gica
4. Motivar o usu√°rio a continuar progredindo
5. Explicar benef√≠cios dos tiers

Seja sempre positivo, motivador e pr√°tico. Use emojis ocasionalmente para tornar a conversa mais amig√°vel.
"""
    
    def _get_fallback_response(self, context: Dict[str, Any], user_message: str) -> str:
        """Resposta de fallback quando OpenAI n√£o est√° dispon√≠vel"""
        tier = context['current_tier']
        referrals = context['current_referrals']
        points = context['total_points']
        next_tier = context['next_tier']
        referrals_to_next = context['referrals_to_next']
        
        # Respostas baseadas em palavras-chave
        message_lower = user_message.lower()
        
        if any(word in message_lower for word in ['tier', 'n√≠vel', 'progresso']):
            if next_tier:
                return f"""üéØ **Seu Progresso no Tier {tier}**

Voc√™ est√° no tier **{tier}** com {referrals} referrals e {points} pontos!

Para chegar ao pr√≥ximo tier **{next_tier}**, voc√™ precisa de mais **{referrals_to_next} referrals**.

üí° **Dicas para ganhar mais referrals:**
‚Ä¢ Compartilhe seu c√≥digo de refer√™ncia nas redes sociais
‚Ä¢ Convide amigos pessoalmente
‚Ä¢ Participe de grupos sobre comida e restaurantes
‚Ä¢ Seja ativo na comunidade Forkly

Continue assim! üöÄ"""
            else:
                return f"""üèÜ **Parab√©ns! Voc√™ alcan√ßou o tier m√°ximo!**

Voc√™ est√° no tier **{tier}** - o mais alto poss√≠vel! 

Com {referrals} referrals e {points} pontos, voc√™ √© um verdadeiro embaixador do Forkly! 

üíé **Continue compartilhando e ajudando outros usu√°rios a descobrirem os melhores restaurantes!**"""
        
        elif any(word in message_lower for word in ['pontos', 'points', 'recompensa']):
            return f"""üí∞ **Seus Pontos: {points}**

Com {points} pontos, voc√™ pode:

üéÅ **Resgatar recompensas dispon√≠veis**
‚Ä¢ Descontos em restaurantes
‚Ä¢ Itens gr√°tis
‚Ä¢ Recursos premium

üí° **Como ganhar mais pontos:**
‚Ä¢ Cada referral = +50 pontos
‚Ä¢ Primeira review de referral = +100 pontos
‚Ä¢ Complete conquistas para pontos extras

üîç **Dica:** Verifique a aba "Recompensas" para ver o que voc√™ pode resgatar agora!"""
        
        elif any(word in message_lower for word in ['referral', 'indicar', 'convidar']):
            return f"""üë• **Seus Referrals: {referrals}**

Para ganhar mais referrals:

üì± **Estrat√©gias eficazes:**
‚Ä¢ Compartilhe seu c√≥digo em grupos de WhatsApp sobre comida
‚Ä¢ Poste nas redes sociais com hashtags #Forkly #Restaurantes
‚Ä¢ Convide amigos pessoalmente
‚Ä¢ Participe de eventos gastron√¥micos

üéØ **Meta:** {referrals_to_next} referrals para o pr√≥ximo tier!

üí™ **Voc√™ consegue! Cada referral conta!**"""
        
        else:
            return f"""üëã **Ol√°! Sou seu assistente de gamifica√ß√£o!**

Vejo que voc√™ est√° no tier **{tier}** com {referrals} referrals e {points} pontos!

Como posso te ajudar hoje? Posso te dar dicas sobre:
‚Ä¢ üéØ Como progredir para o pr√≥ximo tier
‚Ä¢ üí∞ Como usar seus pontos
‚Ä¢ üë• Como ganhar mais referrals
‚Ä¢ üèÜ Como desbloquear conquistas

O que voc√™ gostaria de saber? üòä"""
    
    def create_conversation(self, user: User) -> AIConversation:
        """Cria uma nova conversa com IA"""
        session_id = str(uuid.uuid4())
        conversation = AIConversation.objects.create(
            user=user,
            session_id=session_id
        )
        return conversation
    
    def add_message(self, conversation: AIConversation, role: str, content: str, 
                   message_type: str = 'text', metadata: Dict = None) -> AIMessage:
        """Adiciona mensagem √† conversa"""
        return AIMessage.objects.create(
            conversation=conversation,
            role=role,
            content=content,
            message_type=message_type,
            metadata=metadata or {}
        )
    
    def get_conversation_history(self, conversation: AIConversation) -> List[Dict]:
        """Obt√©m hist√≥rico da conversa"""
        messages = conversation.messages.all()
        return [
            {
                'role': msg.role,
                'content': msg.content,
                'message_type': msg.message_type,
                'created_at': msg.created_at.isoformat(),
                'metadata': msg.metadata
            }
            for msg in messages
        ]
